     1                                  ;========================================================================================
     2                                  ;Convention
     3                                  ;RSP, RBP, RBX, R12, R13, R14, R15 - nonvalotile save in stack by called function
     4                                  ;RAX, RCX, RDX, RSI, RDI, R8, R9, R10, R11, - valotile save by code which calls
     5                                  ;ABI GCC:       ;r9d - first 6 arguments in registers, than stack
     6                                                  ;r8d
     7                                                  ;ecx
     8                                                  ;edx
     9                                                  ;esi
    10                                                  ;edi 
    11                                  ;Convention Syscall:
    12                                                  ;rdi - args for syscall
    13                                                  ;rsi
    14                                                  ;rdx
    15                                                  ;r11
    16                                                  ;r10
    17                                                  ;r8
    18                                                  ;r9
    19                                  ;========================================================================================
    20                                  
    21                                  section .text
    22                                  
    23                                  global Printf32
    24                                  global print_char
    25                                  global print_string
    26                                  
    27                                  _format_str     equ 16
    28                                  _stack_offset   equ 8
    29                                  
    30                                  ;----------------------------------------FUNCTIONS---------------------------------------
    31                                  ;Printf32(...) - function supporting because of ABI
    32                                  ;DON'T CHANGE R10
    33                                  
    34                                  Printf32: 
    35 00000000 90                              nop
    36                                                  
    37 00000001 415A                            pop  r10        ; pop in r11 address of call
    38                                          
    39 00000003 4151                            push r9         ; save all regs in stack
    40 00000005 4150                            push r8         ; now i have all args in stack
    41 00000007 51                              push rcx
    42 00000008 52                              push rdx
    43 00000009 56                              push rsi
    44 0000000A 57                              push rdi
    45                                          
    46 0000000B E807000000                      call printf_32  ;call main printf_32
    47                                          
    48 00000010 4883C430                        add  rsp, 48    ;free 6 stack-regs args
    49                                          
    50 00000014 4152                            push r10        ;put in stack address of return from Printf32
    51 00000016 C3                              ret
    52                                  ;----------------------------------------------------------------------------------------
    53                                  ;printf_32(char* buffer, ...) - function prints string from buffer
    54                                  ;Args: ABI - arguments in stack
    55                                  ;Ret: void
    56                                  ;Change: rbx, rdi, rcx, r12
    57                                  
    58                                  printf_32:
    59 00000017 90                              nop
    60                                          ;input action
    61 00000018 55                              push rbp        ; save rbp
    62 00000019 4889E5                          mov rbp, rsp    ; new rbp = rsp
    63                                          ;sub rsp,n      ;local vars
    64                                          ;-------------------------------
    65                                          
    66 0000001C 4831C9                          xor rcx, rcx                            ;rcx - offset for argument of %
    67 0000001F 4989EC                          mov r12, rbp                            ;r12 - current argument of printf
    68 00000022 4983C410                        add r12, _format_str
    69 00000026 4983C408                        add r12, _stack_offset
    70 0000002A 488B5D10                        mov rbx, qword [rbp+_format_str]        ;rbx - address on buffer
    71                                  
    72                                  .while_start:                                   ;while(*ch != '\0') {print_char(*ch)}
    73 0000002E 803B00                          cmp byte [rbx], 0    ; *ch != '\0'
    74 00000031 7458                            je .while_end
    75                                          ;check for % - format string
    76                                  .if_start:
    77 00000033 803B25                          cmp byte [rbx], '%'
    78 00000036 7517                            jne .if_else
    79 00000038 48FFC3                          inc rbx         ;set arg of % 
    80                                          ;check if last symbol was %
    81 0000003B 803B00                          cmp byte [rbx], 0    ; *ch != '\0'
    82 0000003E 744B                            je .while_end
    83                                          ;-------------------------------
    84                                          ;cases:
    85                                          ;1) %%
    86 00000040 803B25                          cmp byte [rbx], '%'
    87 00000043 740A                            je .if_else     ;just print symbol in else
    88                                          ;2) %c
    89 00000045 803B63                          cmp byte [rbx], 'c'
    90 00000048 7418                            je .case_char
    91                                          ;3) %s
    92 0000004A 803B73                          cmp byte [rbx], 's'
    93 0000004D 7424                            je .case_string 
    94                                  
    95                                  .if_else:
    96                                          ;if simple symbol just out
    97 0000004F 4831FF                          xor rdi, rdi         ;set rdi = 0
    98 00000052 408A3B                          mov dil, byte [rbx]  ;mov rdi(dil = 1 byte), [rbx] 
    99 00000055 50                              push rax        ;save regs of syscall
   100 00000056 56                              push rsi
   101 00000057 52                              push rdx
   102 00000058 E830000000                      call print_char ;call print current char
   103 0000005D 5A                              pop rdx         ;revive regs
   104 0000005E 5E                              pop rsi
   105 0000005F 58                              pop rax         
   106 00000060 EB24                            jmp .if_end
   107                                  ;Tables of jumps for cases of %
   108                                  .table_of_jmps:
   109                                  .case_char:
   110 00000062 498B3C24                        mov rdi, [r12]
   111 00000066 50                              push rax        ;save regs
   112 00000067 56                              push rsi
   113 00000068 52                              push rdx
   114 00000069 E81F000000                      call print_char ;call func
   115 0000006E 5A                              pop rdx         ;revive regs
   116 0000006F 5E                              pop rsi
   117 00000070 58                              pop rax     
   118 00000071 EB0F                            jmp .end_case
   119                                  .case_string:
   120 00000073 57                              push rdi        ;save regs
   121 00000074 53                              push rbx
   122 00000075 498B3C24                        mov rdi, [r12]
   123 00000079 E829000000                      call print_string ;call func
   124 0000007E 5B                              pop rbx         ;revive regs
   125 0000007F 5F                              pop rdi
   126 00000080 EB00                            jmp .end_case
   127                                  ;case_decimal:
   128                                  ;
   129                                  ;case_hex:
   130                                  .end_case:
   131 00000082 4983C408                        add r12, _stack_offset
   132                                  .if_end:
   133                                          ;set next symbol
   134 00000086 48FFC3                          inc rbx
   135 00000089 EBA3                            jmp .while_start
   136                                  .while_end:
   137 0000008B C9                              leave           ;mov rsp, rbp ; free stack from local vars and all rubbish
   138                                                          ;pop rbp      ; revive rbp
   139 0000008C C3                              ret             ; return to last position
   140                                  ;----------------------------------------------------------------------------------------
   141                                  ;print_char(int a) - function of write one char symbol in stdout
   142                                  ;Args: ABI - argument in rdi
   143                                  ;Ret: void
   144                                  ;Change: rdi, rax, rsi, rdx
   145                                  print_char:
   146 0000008D 90                              nop
   147 0000008E 90                              nop
   148 0000008F 90                              nop
   149 00000090 57                              push rdi
   150 00000091 B801000000                      mov rax, 0x01      ; syscall 0x01: write(rdi, rsi, rdx) - (int, char*, size_t)
   151 00000096 BF01000000                      mov rdi, 1         ; stdout
   152 0000009B 4889E6                          mov rsi, rsp       ; address of str - in stack last char
   153 0000009E BA01000000                      mov rdx, 1         ; length = 1 (one char)
   154 000000A3 0F05                            syscall
   155 000000A5 5F                              pop rdi
   156 000000A6 C3                              ret
   157                                  ;----------------------------------------------------------------------------------------
   158                                  ;print_string(const char* buff) - function of write string in stdout
   159                                  ;Args: ABI - argument in rdi
   160                                  ;Ret: void
   161                                  ;Change: rdi, rbx
   162                                  print_string:
   163                                          ;while(*ch != '\0') {print_char(*ch)}
   164 000000A7 57                              push rdi
   165 000000A8 4889FB                          mov rbx, rdi   ;rbx - address on buffer
   166                                  .while_start:
   167 000000AB 803B00                          cmp byte [rbx], 0    ; *ch != '\0'
   168 000000AE 7416                            je .while_end
   169 000000B0 4831FF                          xor rdi, rdi         ;set rdi = 0
   170 000000B3 408A3B                          mov dil, byte [rbx]  ;mov rdi(dil = 1 byte), [rbx] 
   171 000000B6 50                              push rax        ;save regs of syscall
   172 000000B7 56                              push rsi
   173 000000B8 52                              push rdx
   174 000000B9 E8CFFFFFFF                      call print_char ;call print current char
   175 000000BE 5A                              pop rdx         ;revive regs
   176 000000BF 5E                              pop rsi
   177 000000C0 58                              pop rax         
   178                                          ;set next symbol
   179 000000C1 48FFC3                          inc rbx
   180 000000C4 EBE5                            jmp .while_start
   181                                  .while_end:
   182 000000C6 5F                              pop rdi
   183 000000C7 C3                              ret
   184                                  ;----------------------------------------------------------------------------------------
   185                                  ;print_decimal(int a) - function of write decimal number
   186                                  ;Args: ABI - argument in rdi
   187                                  ;Ret: void
   188                                  ;Change:
   189                                  ;print_decimal:
